name: check
on:
  schedule:
    - cron: '50 0 * * *'
  workflow_dispatch:

jobs:
  resolverscheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check
        run: |
          rm -rf *
          sudo apt-get install jq
          git clone https://github.com/dnscrypt/dnscrypt-resolvers.git
          cp .github/workflows/relaycheck.sh dnscrypt-resolvers/.github/workflows/relaycheck.sh
          cd dnscrypt-resolvers
          curl https://download.dnscrypt.info/dnscrypt-resolvers/json/public-resolvers.json | jq -r '.[] | select(.dnssec == true) | select(.ipv6 == false) | select(.nofilter == false) | select(.nolog == true) | select(.proto == "DNSCrypt") | .name,.stamp' | sed -e '/family/,+1d' -e '/sfw/,+1d' -e '/nogoogle/,+1d'  -e '/adguard/,+1d' -e '/cleanbrowsing/,+1d' -e '/quad9/,+1d' -e 's/^/## /g' -e 's/## sdns/sdns/g' > v3/public-resolvers.md
          .github/workflows/resolverscheck.sh | tee resolverscheck
          sort -u resolverscheck | tee ../public-resolvers
          chmod +x .github/workflows/relaycheck.sh
          .github/workflows/relaycheck.sh | tee relaycheck
          sed -e '/linux/d' -e '/ERROR/d' relaycheck > relaycheck.txt
          sort -u relaycheck.txt | tee ../relays
          rm -rf ../dnscrypt-resolvers
      - name: Commit
        run: |
          git config user.name "jueyn"
          git config user.email "129744577+jueyn@users.noreply.github.com"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit --allow-empty -m "$(git log -1 --pretty=%s)"
          git push
          
  push:
    needs: resolverscheck
    runs-on: ubuntu-latest
    env:
      SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
      USER_NAME: ${{ secrets.USER_NAME }}
      DEST_REPO: ${{ secrets.DEST_REPO }}
      USER_EMAIL: ${{ secrets.USER_EMAIL }}
      GITHUB_SERVER: github.com
      TARGET_DIRECTORY: ''
      TARGET_BRANCH: master
      COMMIT_MESSAGE: ${COMMIT_MESSAGE}
      
    steps:
      -
        name: Checkout
        run: |
          git config --global --add safe.directory $(pwd)
          git clone --quiet https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} origin
          
      -
        name: Push
        run: |
          mkdir --parents "$HOME/.ssh"
          DEPLOY_KEY_FILE="$HOME/.ssh/deploy_key"
          echo "${SSH_DEPLOY_KEY}" > "$DEPLOY_KEY_FILE"
          chmod 600 "$DEPLOY_KEY_FILE"
          
          SSH_KNOWN_HOSTS_FILE="$HOME/.ssh/known_hosts"
          ssh-keyscan -H "$GITHUB_SERVER" > "$SSH_KNOWN_HOSTS_FILE"
          
          export GIT_SSH_COMMAND="ssh -i "$DEPLOY_KEY_FILE" -o UserKnownHostsFile=$SSH_KNOWN_HOSTS_FILE"
          GIT_CMD_REPOSITORY="git@$GITHUB_SERVER:${USER_NAME}/${DEST_REPO}.git"
          
          
          CLONE_DIR=$(mktemp -d)
          
          git --version
          git lfs install
          git config --global user.email "${USER_EMAIL}"
          git config --global user.name "${USER_NAME}"
          git config --global http.version HTTP/1.1
          
          git clone --single-branch --depth 1 "$GIT_CMD_REPOSITORY" "$CLONE_DIR"
          ls -la "$CLONE_DIR"
          
          
          TEMP_DIR=$(mktemp -d)
          mv "$CLONE_DIR/.git" "$TEMP_DIR/.git"
          
          ABSOLUTE_TARGET_DIRECTORY="$CLONE_DIR/$TARGET_DIRECTORY/"
          rm -rf "$ABSOLUTE_TARGET_DIRECTORY"
          mkdir -p "$ABSOLUTE_TARGET_DIRECTORY"
          ls -al
          ls -al /
          
          
          mv "$TEMP_DIR/.git" "$CLONE_DIR/.git"
         
          cp -p origin/public-resolvers origin/relays "$CLONE_DIR/$TARGET_DIRECTORY"
          cd "$CLONE_DIR"
          ls -la
          
          COMMIT_MESSAGE="$(date "+%Y%m%d-%H%M")"
          
          git config --global --add safe.directory "$CLONE_DIR"
          git add .
          git status
          git diff-index --quiet HEAD || git commit --message "$COMMIT_MESSAGE" --allow-empty
          git push "$GIT_CMD_REPOSITORY" --set-upstream "$TARGET_BRANCH"
          
